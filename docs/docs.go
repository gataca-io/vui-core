// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v2/authentication_responses": {
            "post": {
                "description": "A Holder may submit a verifiable presentation in response to a given authentication_request in order to finish the exchange.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Presentations",
                    "Connect"
                ],
                "summary": "Submit a Verifiable Presentation under the siop standard",
                "parameters": [
                    {
                        "description": "Verifiable Presentation token for DID SIOP",
                        "name": "submission",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.SIOPSubmission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verification result.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.VerificationResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Request body malformed",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "403": {
                        "description": "Not Authorized to submit a presentation exchanges.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "404": {
                        "description": "Inexistent process Id",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "406": {
                        "description": "Presentation submission not acceptable",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "409": {
                        "description": "Process Id cannot be modified",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Serverside error processing the request.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v2/data_agreements": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "description": "Create a new data agreement to record by the Verifier, in order to hold the service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DataAgreements",
                    "Connect"
                ],
                "summary": "Create Data Agreement",
                "parameters": [
                    {
                        "description": "Data Agreement of this service",
                        "name": "dataAgreement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DataAgreement"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Updated Data Agreement",
                        "schema": {
                            "$ref": "#/definitions/models.DataAgreement"
                        }
                    },
                    "400": {
                        "description": "Invalid input data.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "403": {
                        "description": "Not Authorized to create data agreements.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Serverside error processing the request.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v2/data_agreements/{id}": {
            "delete": {
                "description": "Use case not implemented yet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DataAgreements",
                    "Connect"
                ],
                "summary": "Delete a current data agreement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Data agreement Id",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Revocated Data Agreement",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DataAgreement"
                            }
                        }
                    },
                    "404": {
                        "description": "Inexistent process Id",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "409": {
                        "description": "Process Id cannot be retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Serverside error processing the request.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    }
                }
            },
            "patch": {
                "description": "Use cases not implemented yet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DataAgreements",
                    "Connect"
                ],
                "summary": "Modify an existing data agreement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Data agreement Id",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "description": "Data Agreement of this service",
                        "name": "dataAgreement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DataAgreement"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated data agreement",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DataAgreement"
                            }
                        }
                    },
                    "404": {
                        "description": "Inexistent process Id",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "409": {
                        "description": "Process Id cannot be retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Serverside error processing the request.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v2/data_agreements/{id}/{version}": {
            "get": {
                "description": "Retrieve the last version of a Data Agreement with all the corresponding events.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DataAgreements",
                    "Connect"
                ],
                "summary": "Retrieve an existing Data Agreement",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Data agreement Id",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "type": "string",
                        "description": "Optional: Version of the data agreement to recover. Default: last",
                        "name": "version",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data Agreement with that Id",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DataAgreement"
                            }
                        }
                    },
                    "404": {
                        "description": "Inexistent process Id",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "409": {
                        "description": "Process Id cannot be retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Serverside error processing the request.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v2/presentations": {
            "post": {
                "security": [
                    {
                        "Token": []
                    }
                ],
                "description": "Create a new presentation exchange process by providing it's presentation definition. Relying parties with due authentication can perform this operation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Presentations",
                    "Connect"
                ],
                "summary": "Create Presentation Exchange",
                "parameters": [
                    {
                        "description": "Presentation definition of this exchange",
                        "name": "presentationDefinition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PresentationDefinition"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Reference to the exchange process",
                        "schema": {
                            "$ref": "#/definitions/controller.PECreationResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "403": {
                        "description": "Not Authorized to create exchanges.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Serverside error processing the request.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v2/presentations/{id}": {
            "get": {
                "description": "The relying party may at any time query the status of a given exchange at any time to see if the data has been validated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Presentations",
                    "Connect"
                ],
                "summary": "Check the status of a presentation exchange",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Presentation exchange Id",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Valid verification result.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.VerificationResult"
                            }
                        }
                    },
                    "202": {
                        "description": "Pending verification result. No submission in the exchange yet.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.VerificationResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Process Id cannot be retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "403": {
                        "description": "Not Authorized to retrieve the presentation exchange",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "404": {
                        "description": "Inexistent process Id",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "406": {
                        "description": "Presentation submission in valid",
                        "schema": {
                            "$ref": "#/definitions/models.VerificationResult"
                        }
                    },
                    "500": {
                        "description": "Serverside error processing the request.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v2/presentations/{id}/data_agreement": {
            "get": {
                "description": "When expanding a presentation, the verifier may just offer the URI to the data agreement template linked to that service",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Presentations",
                    "Connect"
                ],
                "summary": "Get a the data agreement template of a Presentation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Presentation exchange Id",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tenant configurations requested.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DataAgreement"
                            }
                        }
                    },
                    "404": {
                        "description": "Inexistent process Id",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "409": {
                        "description": "Process Id cannot be retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Serverside error processing the request.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v2/presentations/{id}/definition": {
            "get": {
                "description": "Upon scanning a QR, a Holder may retrieve the presentation definition associated to the process identifier in order to perform an exchange.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Presentations",
                    "Connect"
                ],
                "summary": "Get a Presentation Definition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Presentation exchange Id",
                        "name": "id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tenant configurations requested.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.PresentationDefinition"
                            }
                        }
                    },
                    "404": {
                        "description": "Inexistent process Id",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "409": {
                        "description": "Process Id cannot be retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Serverside error processing the request.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    }
                }
            }
        },
        "/api/v2/presentations/{id}/submission": {
            "post": {
                "description": "A Holder may submit a verifiable presentation in response to a given definition in order to fulfill the exchange.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Presentations",
                    "Connect"
                ],
                "summary": "Submit a Verifiable Presentation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Presentation exchange Id",
                        "name": "id",
                        "in": "path"
                    },
                    {
                        "description": "Verifiable Presentation",
                        "name": "submission",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.VerifiablePresentation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Verification result.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.VerificationResult"
                            }
                        }
                    },
                    "400": {
                        "description": "Request body malformed",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "403": {
                        "description": "Not Authorized to submit a presentation exchanges.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "404": {
                        "description": "Inexistent process Id",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "406": {
                        "description": "Presentation submission not acceptable",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "409": {
                        "description": "Process Id cannot be modified",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    },
                    "500": {
                        "description": "Serverside error processing the request.",
                        "schema": {
                            "$ref": "#/definitions/models.ResponseMessage"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.PECreationResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "32f54163-7166-48f1-93d8-ff217bdb0653"
                },
                "uri": {
                    "type": "string",
                    "example": "https://vui.gataca.io/api/presentations/v2/32f54163-7166-48f1-93d8-ff217bdb0653/definition"
                }
            }
        },
        "controller.SIOPSubmission": {
            "type": "object",
            "properties": {
                "vp_token": {
                    "type": "object",
                    "properties": {
                        "format": {
                            "type": "string",
                            "example": "ldp_vp"
                        },
                        "presentation": {
                            "$ref": "#/definitions/models.VerifiablePresentation"
                        }
                    }
                }
            }
        },
        "models.Constraints": {
            "type": "object",
            "properties": {
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Field"
                    }
                },
                "limit_disclosure": {
                    "type": "boolean"
                },
                "subject_is_holder": {
                    "type": "string"
                },
                "subject_is_issuer": {
                    "type": "string"
                }
            }
        },
        "models.DataAgreement": {
            "type": "object",
            "properties": {
                "@context": {
                    "$ref": "#/definitions/models.SSIContext"
                },
                "data_holder": {
                    "type": "string"
                },
                "data_receiver": {
                    "$ref": "#/definitions/models.DataReceiver"
                },
                "data_subject": {
                    "type": "string"
                },
                "dpia": {
                    "$ref": "#/definitions/models.Dpia"
                },
                "event": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Event"
                    }
                },
                "id": {
                    "type": "string"
                },
                "personal_data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PersonalDatum"
                    }
                },
                "purposes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Purpose"
                    }
                },
                "template_id": {
                    "type": "string"
                },
                "template_version": {
                    "type": "string"
                },
                "termination_timestamp": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.DataAgreementRef": {
            "type": "object",
            "properties": {
                "dataAgreement": {
                    "$ref": "#/definitions/models.DataAgreement"
                },
                "ref": {
                    "type": "string"
                }
            }
        },
        "models.DataPolicy": {
            "type": "object",
            "properties": {
                "data_retention_period": {
                    "type": "integer"
                },
                "geographic_restriction": {
                    "type": "string"
                },
                "industry_scope": {
                    "type": "string"
                },
                "jurisdictions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "policy_URL": {
                    "type": "string"
                },
                "storage_location": {
                    "type": "string"
                }
            }
        },
        "models.DataReceiver": {
            "type": "object",
            "properties": {
                "consent_duration": {
                    "type": "integer"
                },
                "form_of_consent": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "models.Descriptor": {
            "type": "object",
            "required": [
                "format",
                "id",
                "path"
            ],
            "properties": {
                "format": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "models.Dpia": {
            "type": "object",
            "properties": {
                "dpia_date": {
                    "type": "string"
                },
                "dpia_summary_url": {
                    "type": "string"
                }
            }
        },
        "models.Event": {
            "type": "object",
            "properties": {
                "principle_did": {
                    "type": "string"
                },
                "proof": {
                    "$ref": "#/definitions/models.SSIProof"
                },
                "state": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "models.Field": {
            "type": "object",
            "required": [
                "path"
            ],
            "properties": {
                "filter": {
                    "$ref": "#/definitions/models.Filter"
                },
                "path": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "predicate": {
                    "type": "string"
                },
                "purpose": {
                    "type": "string"
                }
            }
        },
        "models.Filter": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "const": {},
                "enum": {
                    "type": "array",
                    "items": {}
                },
                "exclusiveMaximum": {},
                "exclusiveMinimum": {},
                "format": {
                    "type": "string"
                },
                "maxLength": {
                    "type": "integer"
                },
                "maximum": {},
                "minLength": {
                    "type": "integer"
                },
                "minimum": {},
                "not": {
                    "$ref": "#/definitions/models.Filter"
                },
                "pattern": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "models.Format": {
            "type": "object",
            "properties": {
                "jwt": {
                    "$ref": "#/definitions/models.JWTType"
                },
                "jwt_vc": {
                    "$ref": "#/definitions/models.JWTType"
                },
                "jwt_vp": {
                    "$ref": "#/definitions/models.JWTType"
                },
                "ldp": {
                    "$ref": "#/definitions/models.LDPType"
                },
                "ldp_vc": {
                    "$ref": "#/definitions/models.LDPType"
                },
                "ldp_vp": {
                    "$ref": "#/definitions/models.LDPType"
                }
            }
        },
        "models.InputDescriptor": {
            "type": "object",
            "required": [
                "id",
                "schema"
            ],
            "properties": {
                "constraints": {
                    "$ref": "#/definitions/models.Constraints"
                },
                "group": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "purpose": {
                    "type": "string"
                },
                "schema": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/models.Schema"
                    }
                }
            }
        },
        "models.JWTType": {
            "type": "object",
            "required": [
                "alg"
            ],
            "properties": {
                "alg": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.LDPType": {
            "type": "object",
            "required": [
                "proof_type"
            ],
            "properties": {
                "proof_type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.PersonalDatum": {
            "type": "object",
            "properties": {
                "attribute_id": {
                    "type": "string"
                },
                "attribute_name": {
                    "type": "string"
                },
                "attribute_sensitive": {
                    "type": "boolean"
                },
                "purposes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.PresentationDefinition": {
            "type": "object",
            "required": [
                "id",
                "input_descriptors"
            ],
            "properties": {
                "dataAgreement": {
                    "$ref": "#/definitions/models.DataAgreementRef"
                },
                "format": {
                    "$ref": "#/definitions/models.Format"
                },
                "id": {
                    "type": "string"
                },
                "input_descriptors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.InputDescriptor"
                    }
                },
                "locale": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "proof": {
                    "$ref": "#/definitions/models.SSIProof"
                },
                "purpose": {
                    "type": "string"
                },
                "submission_requirements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SubmissionRequirement"
                    }
                }
            }
        },
        "models.PresentationSubmission": {
            "type": "object",
            "required": [
                "definition_id",
                "descriptor_map",
                "id"
            ],
            "properties": {
                "definition_id": {
                    "type": "string"
                },
                "descriptor_map": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Descriptor"
                    }
                },
                "id": {
                    "type": "string"
                },
                "locale": {
                    "type": "string"
                }
            }
        },
        "models.Proof": {
            "type": "object",
            "properties": {
                "@context": {
                    "$ref": "#/definitions/models.SSIContext"
                },
                "cades": {
                    "type": "string",
                    "example": "308204c906092a864886f70d010702...266ad9fee3375d8095"
                },
                "challenge": {
                    "type": "string",
                    "example": "TyYfomXjwPaQoSRzCZk7CxFYR8DwAigt"
                },
                "created": {
                    "type": "string",
                    "example": "2019-10-01T12:12:05.999Z"
                },
                "creator": {
                    "type": "string",
                    "example": "did:gatc:yyyyyyyyyyyy#keys-1"
                },
                "domain": {
                    "type": "string"
                },
                "nonce": {
                    "type": "string",
                    "example": "TyYfomXjwPaQoSRzCZk7CxFYR8DwAigt"
                },
                "proofPurpose": {
                    "type": "string",
                    "example": "Authentication"
                },
                "proofValue": {
                    "type": "string",
                    "example": "bQ5AimlvOv6p5wa9pVlmjWgPMr7j9rKw_yjUL6yHlQNwnKk7HL8VQzIT0Xx"
                },
                "signatureValue": {
                    "type": "string",
                    "example": "bQ5AimlvOv6p5wa9pVlmjWgPMr7j9rKw_yjUL6yHlQNwnKk7HL8VQzIT0Xx"
                },
                "type": {
                    "type": "string",
                    "example": "Ed25519Signature2018"
                },
                "verificationMethod": {
                    "type": "string",
                    "example": "did:gatc:yyyyyyyyyyyy#keys-1"
                }
            }
        },
        "models.Purpose": {
            "type": "object",
            "properties": {
                "data_policy": {
                    "$ref": "#/definitions/models.DataPolicy"
                },
                "id": {
                    "type": "string"
                },
                "legal_basis": {
                    "type": "string"
                },
                "method_of_use": {
                    "type": "string"
                },
                "purpose_category": {
                    "type": "string"
                },
                "purpose_description": {
                    "type": "string"
                }
            }
        },
        "models.ResponseMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Some description message"
                }
            }
        },
        "models.SSIContext": {
            "type": "object",
            "properties": {
                "context": {
                    "type": "string"
                },
                "contexts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.SSIProof": {
            "type": "object",
            "properties": {
                "value": {
                    "$ref": "#/definitions/models.Proof"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Proof"
                    }
                }
            }
        },
        "models.Schema": {
            "type": "object",
            "properties": {
                "required": {
                    "type": "boolean"
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "models.SubmissionRequirement": {
            "type": "object",
            "required": [
                "rule"
            ],
            "properties": {
                "count": {
                    "type": "integer",
                    "minimum": 1
                },
                "from": {
                    "type": "string"
                },
                "from_nested": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SubmissionRequirement"
                    }
                },
                "max": {
                    "type": "integer"
                },
                "min": {
                    "description": "Can be zero",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "purpose": {
                    "type": "string"
                },
                "rule": {
                    "type": "string"
                }
            }
        },
        "models.VerifiableCredential": {
            "type": "object",
            "properties": {
                "@context": {
                    "$ref": "#/definitions/models.SSIContext"
                },
                "credentialSchema": {
                    "description": "Reusing the CredentialStatusType coz its the same struct here",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "credentialStatus": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "evidence": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "expirationDate": {
                    "type": "string",
                    "example": "2019-10-01T12:12:15.999Z"
                },
                "id": {
                    "type": "string",
                    "example": "cred:example:zzzzzzzzzzzz"
                },
                "iss": {
                    "type": "string"
                },
                "issuanceDate": {
                    "type": "string",
                    "example": "2019-10-01T12:12:05.999Z"
                },
                "issuer": {
                    "type": "string",
                    "example": "did:example:yyyyyyyyyyyyyyyy"
                },
                "proof": {
                    "$ref": "#/definitions/models.SSIProof"
                },
                "type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "emailCredential"
                    ]
                },
                "validFrom": {
                    "type": "string",
                    "example": "2019-10-01T12:12:05.999Z"
                }
            }
        },
        "models.VerifiablePresentation": {
            "type": "object",
            "properties": {
                "@context": {
                    "$ref": "#/definitions/models.SSIContext"
                },
                "data_agreement_id": {
                    "type": "string",
                    "example": "da:gatc:ehgiuwg39487wq9gf7a47af37"
                },
                "holder": {
                    "type": "string",
                    "example": "did:gatc:example1234567"
                },
                "presentation_submission": {
                    "$ref": "#/definitions/models.PresentationSubmission"
                },
                "proof": {
                    "$ref": "#/definitions/models.SSIProof"
                },
                "type": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "VerifiablePresentation"
                    ]
                },
                "verifiableCredential": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.VerifiableCredential"
                    }
                }
            }
        },
        "models.VerificationResult": {
            "type": "object",
            "properties": {
                "checks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['proof']"
                    ]
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[]"
                    ]
                },
                "warnings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['Context not verified']"
                    ]
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
